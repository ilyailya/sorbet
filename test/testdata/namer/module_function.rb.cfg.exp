digraph "module_function.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$8: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(Funcs))\l<cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$13: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(Funcs))\l<cfgAlias>$17: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$19: T.class_of(C) = alias <C C>\l<statTemp>$15: Sorbet::Private::Static::Void = <cfgAlias>$17: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$19: T.class_of(C))\l<cfgAlias>$22: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$24: T.class_of(C) = alias <C C>\l<statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$24: T.class_of(C))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Funcs#f" {
    label = "::Funcs#f";
    color = blue;
    "bb::Funcs#f_0" [shape = invhouse];
    "bb::Funcs#f_1" [shape = parallelogram];

    "bb::Funcs#f_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\lx: Integer = load_arg(x)\l<returnMethodTemp>$2: Integer = x\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::Funcs#f_0" -> "bb::Funcs#f_1" [style="bold"];
    "bb::Funcs#f_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Funcs#f_1" -> "bb::Funcs#f_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#f" {
    label = "::<Class:Funcs>#f";
    color = blue;
    "bb::<Class:Funcs>#f_0" [shape = invhouse];
    "bb::<Class:Funcs>#f_1" [shape = parallelogram];

    "bb::<Class:Funcs>#f_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#f_0" -> "bb::<Class:Funcs>#f_1" [style="bold"];
    "bb::<Class:Funcs>#f_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#f_1" -> "bb::<Class:Funcs>#f_1" [style="bold"];
}

subgraph "cluster_::Funcs#g" {
    label = "::Funcs#g";
    color = blue;
    "bb::Funcs#g_0" [shape = invhouse];
    "bb::Funcs#g_1" [shape = parallelogram];

    "bb::Funcs#g_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\ls: Symbol = load_arg(s)\l<returnMethodTemp>$2: Symbol = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol\l<unconditional>\l"
    ];

    "bb::Funcs#g_0" -> "bb::Funcs#g_1" [style="bold"];
    "bb::Funcs#g_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Funcs#g_1" -> "bb::Funcs#g_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#g" {
    label = "::<Class:Funcs>#g";
    color = blue;
    "bb::<Class:Funcs>#g_0" [shape = invhouse];
    "bb::<Class:Funcs>#g_1" [shape = parallelogram];

    "bb::<Class:Funcs>#g_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\ls: Symbol = load_arg(s)\l<returnMethodTemp>$2: Symbol = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#g_0" -> "bb::<Class:Funcs>#g_1" [style="bold"];
    "bb::<Class:Funcs>#g_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#g_1" -> "bb::<Class:Funcs>#g_1" [style="bold"];
}

subgraph "cluster_::Funcs#h" {
    label = "::Funcs#h";
    color = blue;
    "bb::Funcs#h_0" [shape = invhouse];
    "bb::Funcs#h_1" [shape = parallelogram];

    "bb::Funcs#h_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Funcs = cast(<self>: NilClass, Funcs);\ls: String = load_arg(s)\l<returnMethodTemp>$2: String = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String\l<unconditional>\l"
    ];

    "bb::Funcs#h_0" -> "bb::Funcs#h_1" [style="bold"];
    "bb::Funcs#h_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Funcs#h_1" -> "bb::Funcs#h_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#h" {
    label = "::<Class:Funcs>#h";
    color = blue;
    "bb::<Class:Funcs>#h_0" [shape = invhouse];
    "bb::<Class:Funcs>#h_1" [shape = parallelogram];

    "bb::<Class:Funcs>#h_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\ls: String = load_arg(s)\l<returnMethodTemp>$2: String = s\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: String\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#h_0" -> "bb::<Class:Funcs>#h_1" [style="bold"];
    "bb::<Class:Funcs>#h_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#h_1" -> "bb::<Class:Funcs>#h_1" [style="bold"];
}

subgraph "cluster_::<Class:Funcs>#<static-init>" {
    label = "::<Class:Funcs>#<static-init>";
    color = blue;
    "bb::<Class:Funcs>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Funcs>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Funcs>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Funcs) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Funcs>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Funcs>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))\l<selfRestore>$8: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_0" -> "bb::<Class:Funcs>#<static-init>_2" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_1" -> "bb::<Class:Funcs>#<static-init>_1" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(Funcs), <selfRestore>$8: T.class_of(Funcs), <block-pre-call-temp>$7: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_2" -> "bb::<Class:Funcs>#<static-init>_5" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_2" -> "bb::<Class:Funcs>#<static-init>_3" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<selfRestore>$8: T.class_of(Funcs), <block-pre-call-temp>$7: Sorbet::Private::Static::Void)\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$8\l<cfgAlias>$24: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$26: Sorbet::Private::Static::Void = <cfgAlias>$24: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))\l<selfRestore>$27: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_3" -> "bb::<Class:Funcs>#<static-init>_6" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(Funcs), <selfRestore>$8: T.class_of(Funcs), <block-pre-call-temp>$7: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$15: Symbol(:\"x\") = :\"x\"\l<cfgAlias>$17: T.class_of(Integer) = alias <C Integer>\l<magic>$18: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$14: {x: T.class_of(Integer)} = <magic>$18: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$15: Symbol(:\"x\"), <cfgAlias>$17: T.class_of(Integer))\l<statTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$14: {x: T.class_of(Integer)})\l<cfgAlias>$20: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$11: T::Private::Methods::DeclBuilder = <statTemp>$12: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$20: T.class_of(Integer))\l<blockReturnTemp>$21: T.noreturn = blockreturn<sig> <blockReturnTemp>$11: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_5" -> "bb::<Class:Funcs>#<static-init>_2" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_6" [
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(Funcs), <selfRestore>$27: T.class_of(Funcs), <block-pre-call-temp>$26: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_6" -> "bb::<Class:Funcs>#<static-init>_9" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_6" -> "bb::<Class:Funcs>#<static-init>_7" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_7" [
        label = "block[id=7, rubyBlockId=0](<selfRestore>$27: T.class_of(Funcs), <block-pre-call-temp>$26: Sorbet::Private::Static::Void)\l<statTemp>$22: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$26, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$27\l<cfgAlias>$43: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$45: Sorbet::Private::Static::Void = <cfgAlias>$43: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))\l<selfRestore>$46: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_7" -> "bb::<Class:Funcs>#<static-init>_10" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_9" [
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(Funcs), <selfRestore>$27: T.class_of(Funcs), <block-pre-call-temp>$26: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$34: Symbol(:\"s\") = :\"s\"\l<cfgAlias>$36: T.class_of(Symbol) = alias <C Symbol>\l<magic>$37: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$33: {s: T.class_of(Symbol)} = <magic>$37: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$34: Symbol(:\"s\"), <cfgAlias>$36: T.class_of(Symbol))\l<statTemp>$31: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$33: {s: T.class_of(Symbol)})\l<cfgAlias>$39: T.class_of(Symbol) = alias <C Symbol>\l<blockReturnTemp>$30: T::Private::Methods::DeclBuilder = <statTemp>$31: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$39: T.class_of(Symbol))\l<blockReturnTemp>$40: T.noreturn = blockreturn<sig> <blockReturnTemp>$30: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_9" -> "bb::<Class:Funcs>#<static-init>_6" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_10" [
        label = "block[id=10, rubyBlockId=3](<self>: T.class_of(Funcs), <selfRestore>$46: T.class_of(Funcs), <block-pre-call-temp>$45: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_10" -> "bb::<Class:Funcs>#<static-init>_13" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_10" -> "bb::<Class:Funcs>#<static-init>_11" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_11" [
        label = "block[id=11, rubyBlockId=0](<selfRestore>$46: T.class_of(Funcs), <block-pre-call-temp>$45: Sorbet::Private::Static::Void)\l<statTemp>$41: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$45, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$46\l<cfgAlias>$62: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$64: Sorbet::Private::Static::Void = <cfgAlias>$62: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))\l<selfRestore>$65: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_11" -> "bb::<Class:Funcs>#<static-init>_14" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_13" [
        label = "block[id=13, rubyBlockId=3](<self>: T.class_of(Funcs), <selfRestore>$46: T.class_of(Funcs), <block-pre-call-temp>$45: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$53: Symbol(:\"s\") = :\"s\"\l<cfgAlias>$55: T.class_of(Symbol) = alias <C Symbol>\l<magic>$56: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$52: {s: T.class_of(Symbol)} = <magic>$56: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$53: Symbol(:\"s\"), <cfgAlias>$55: T.class_of(Symbol))\l<statTemp>$50: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$52: {s: T.class_of(Symbol)})\l<cfgAlias>$58: T.class_of(Symbol) = alias <C Symbol>\l<blockReturnTemp>$49: T::Private::Methods::DeclBuilder = <statTemp>$50: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$58: T.class_of(Symbol))\l<blockReturnTemp>$59: T.noreturn = blockreturn<sig> <blockReturnTemp>$49: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_13" -> "bb::<Class:Funcs>#<static-init>_10" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_14" [
        label = "block[id=14, rubyBlockId=4](<self>: T.class_of(Funcs), <selfRestore>$65: T.class_of(Funcs), <block-pre-call-temp>$64: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_14" -> "bb::<Class:Funcs>#<static-init>_17" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_14" -> "bb::<Class:Funcs>#<static-init>_15" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_15" [
        label = "block[id=15, rubyBlockId=0](<selfRestore>$65: T.class_of(Funcs), <block-pre-call-temp>$64: Sorbet::Private::Static::Void)\l<statTemp>$60: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$64, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$65\l<cfgAlias>$81: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$83: Sorbet::Private::Static::Void = <cfgAlias>$81: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Funcs))\l<selfRestore>$84: T.class_of(Funcs) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_15" -> "bb::<Class:Funcs>#<static-init>_18" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_17" [
        label = "block[id=17, rubyBlockId=4](<self>: T.class_of(Funcs), <selfRestore>$65: T.class_of(Funcs), <block-pre-call-temp>$64: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$72: Symbol(:\"s\") = :\"s\"\l<cfgAlias>$74: T.class_of(String) = alias <C String>\l<magic>$75: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$71: {s: T.class_of(String)} = <magic>$75: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$72: Symbol(:\"s\"), <cfgAlias>$74: T.class_of(String))\l<statTemp>$69: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$71: {s: T.class_of(String)})\l<cfgAlias>$77: T.class_of(String) = alias <C String>\l<blockReturnTemp>$68: T::Private::Methods::DeclBuilder = <statTemp>$69: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$77: T.class_of(String))\l<blockReturnTemp>$78: T.noreturn = blockreturn<sig> <blockReturnTemp>$68: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_17" -> "bb::<Class:Funcs>#<static-init>_14" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_18" [
        label = "block[id=18, rubyBlockId=5](<self>: T.class_of(Funcs), <selfRestore>$84: T.class_of(Funcs), <block-pre-call-temp>$83: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Funcs>#<static-init>_18" -> "bb::<Class:Funcs>#<static-init>_21" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_18" -> "bb::<Class:Funcs>#<static-init>_19" [style="tapered"];

    "bb::<Class:Funcs>#<static-init>_19" [
        label = "block[id=19, rubyBlockId=0](<selfRestore>$84: T.class_of(Funcs), <block-pre-call-temp>$83: Sorbet::Private::Static::Void)\l<statTemp>$79: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$83, sig>\l<self>: T.class_of(Funcs) = <selfRestore>$84\l<cfgAlias>$101: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$103: T.class_of(T) = alias <C T>\l<statTemp>$98: T.class_of(Funcs) = <self>: T.class_of(Funcs).extend(<cfgAlias>$101: T.class_of(T::Sig))\l<cfgAlias>$106: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$108: Symbol(:\"f\") = :\"f\"\l<statTemp>$104: Symbol(:\"f\") = <cfgAlias>$106: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Funcs), <statTemp>$108: Symbol(:\"f\"))\l<statTemp>$111: Symbol(:\"f\") = :\"f\"\l<statTemp>$109: T.class_of(Funcs) = <self>: T.class_of(Funcs).private(<statTemp>$111: Symbol(:\"f\"))\l<cfgAlias>$114: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$116: Symbol(:\"f\") = :\"f\"\l<statTemp>$112: Symbol(:\"f\") = <cfgAlias>$114: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(Funcs), <statTemp>$116: Symbol(:\"f\"))\l<cfgAlias>$121: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$123: Symbol(:\"g\") = :\"g\"\l<statTemp>$119: Symbol(:\"g\") = <cfgAlias>$121: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Funcs), <statTemp>$123: Symbol(:\"g\"))\l<statTemp>$117: T.class_of(Funcs) = <self>: T.class_of(Funcs).private(<statTemp>$119: Symbol(:\"g\"))\l<cfgAlias>$126: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$128: Symbol(:\"g\") = :\"g\"\l<statTemp>$124: Symbol(:\"g\") = <cfgAlias>$126: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(Funcs), <statTemp>$128: Symbol(:\"g\"))\l<cfgAlias>$133: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$135: Symbol(:\"h\") = :\"h\"\l<statTemp>$131: Symbol(:\"h\") = <cfgAlias>$133: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Funcs), <statTemp>$135: Symbol(:\"h\"))\l<statTemp>$129: T.class_of(Funcs) = <self>: T.class_of(Funcs).private(<statTemp>$131: Symbol(:\"h\"))\l<cfgAlias>$138: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$140: Symbol(:\"h\") = :\"h\"\l<statTemp>$136: Symbol(:\"h\") = <cfgAlias>$138: T.class_of(Sorbet::Private::Static).keep_self_def(<self>: T.class_of(Funcs), <statTemp>$140: Symbol(:\"h\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_19" -> "bb::<Class:Funcs>#<static-init>_1" [style="bold"];
    "bb::<Class:Funcs>#<static-init>_21" [
        label = "block[id=21, rubyBlockId=5](<self>: T.class_of(Funcs), <selfRestore>$84: T.class_of(Funcs), <block-pre-call-temp>$83: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$91: Symbol(:\"s\") = :\"s\"\l<cfgAlias>$93: T.class_of(String) = alias <C String>\l<magic>$94: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$90: {s: T.class_of(String)} = <magic>$94: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$91: Symbol(:\"s\"), <cfgAlias>$93: T.class_of(String))\l<statTemp>$88: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$90: {s: T.class_of(String)})\l<cfgAlias>$96: T.class_of(String) = alias <C String>\l<blockReturnTemp>$87: T::Private::Methods::DeclBuilder = <statTemp>$88: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$96: T.class_of(String))\l<blockReturnTemp>$97: T.noreturn = blockreturn<sig> <blockReturnTemp>$87: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Funcs>#<static-init>_21" -> "bb::<Class:Funcs>#<static-init>_18" [style="bold"];
}

subgraph "cluster_::C#test_calls" {
    label = "::C#test_calls";
    color = blue;
    "bb::C#test_calls_0" [shape = invhouse];
    "bb::C#test_calls_1" [shape = parallelogram];

    "bb::C#test_calls_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: C = cast(<self>: NilClass, C);\l<statTemp>$5: Integer(0) = 0\l<statTemp>$3: Integer = <self>: C.f(<statTemp>$5: Integer(0))\l<cfgAlias>$8: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$9: Integer(0) = 0\l<statTemp>$6: T.untyped = <cfgAlias>$8: T.class_of(Funcs).f(<statTemp>$9: Integer(0))\l<statTemp>$12: Symbol(:\"f\") = :\"f\"\l<statTemp>$10: Symbol = <self>: C.g(<statTemp>$12: Symbol(:\"f\"))\l<cfgAlias>$15: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$16: Symbol(:\"f\") = :\"f\"\l<statTemp>$13: Symbol = <cfgAlias>$15: T.class_of(Funcs).g(<statTemp>$16: Symbol(:\"f\"))\l<statTemp>$19: String(\"hello\") = \"hello\"\l<statTemp>$17: String = <self>: C.h(<statTemp>$19: String(\"hello\"))\l<cfgAlias>$22: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$23: String(\"world\") = \"world\"\l<statTemp>$20: String = <cfgAlias>$22: T.class_of(Funcs).h(<statTemp>$23: String(\"world\"))\l<cfgAlias>$25: T.class_of(C) = alias <C C>\l<returnMethodTemp>$2: T.untyped = <cfgAlias>$25: T.class_of(C).f()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::C#test_calls_0" -> "bb::C#test_calls_1" [style="bold"];
    "bb::C#test_calls_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::C#test_calls_1" -> "bb::C#test_calls_1" [style="bold"];
}

subgraph "cluster_::<Class:C>#<static-init>" {
    label = "::<Class:C>#<static-init>";
    color = blue;
    "bb::<Class:C>#<static-init>_0" [shape = invhouse];
    "bb::<Class:C>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:C>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(C) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U C>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U C>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$6: T.class_of(Funcs) = alias <C Funcs>\l<statTemp>$3: T.class_of(C) = <self>: T.class_of(C).include(<cfgAlias>$6: T.class_of(Funcs))\l<cfgAlias>$9: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$11: Symbol(:\"test_calls\") = :\"test_calls\"\l<statTemp>$7: Symbol(:\"test_calls\") = <cfgAlias>$9: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(C), <statTemp>$11: Symbol(:\"test_calls\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:C>#<static-init>_0" -> "bb::<Class:C>#<static-init>_1" [style="bold"];
    "bb::<Class:C>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:C>#<static-init>_1" -> "bb::<Class:C>#<static-init>_1" [style="bold"];
}

}

