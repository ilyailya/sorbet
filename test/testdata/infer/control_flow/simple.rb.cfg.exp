digraph "simple.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$7: T.class_of(ControlFlow) = alias <C ControlFlow>\l<statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(ControlFlow))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$12: T.class_of(ControlFlow) = alias <C ControlFlow>\l<statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(ControlFlow))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0" {
    label = "::ControlFlow#orZero0";
    color = blue;
    "bb::ControlFlow#orZero0_0" [shape = invhouse];
    "bb::ControlFlow#orZero0_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_2" [style="bold"];
    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_3" [style="tapered"];

    "bb::ControlFlow#orZero0_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_1" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_2" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_3" [
        label = "block[id=3, rubyBlockId=0]()\l<returnTemp>$5: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$5: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_3" -> "bb::ControlFlow#orZero0_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0a" {
    label = "::ControlFlow#orZero0a";
    color = blue;
    "bb::ControlFlow#orZero0a_0" [shape = invhouse];
    "bb::ControlFlow#orZero0a_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0a_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: Integer = load_arg(a)\la: Integer\l"
    ];

    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_2" [style="bold"];
    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_3" [style="tapered"];

    "bb::ControlFlow#orZero0a_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_1" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_2" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_3" [
        label = "block[id=3, rubyBlockId=0]()\l<returnTemp>$5 = 0\l<returnMethodTemp>$2 = return <returnTemp>$5\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_3" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0n" {
    label = "::ControlFlow#orZero0n";
    color = blue;
    "bb::ControlFlow#orZero0n_0" [shape = invhouse];
    "bb::ControlFlow#orZero0n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\lb: T::Boolean = a: T.nilable(Integer).!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_2" [style="bold"];
    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_3" [style="tapered"];

    "bb::ControlFlow#orZero0n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_1" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_2" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_3" [
        label = "block[id=3, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_3" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero1n" {
    label = "::ControlFlow#orZero1n";
    color = blue;
    "bb::ControlFlow#orZero1n_0" [shape = invhouse];
    "bb::ControlFlow#orZero1n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero1n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\l<cfgAlias>$7: T.class_of(Integer) = alias <C Integer>\l<statTemp>$4: T::Boolean = a: T.nilable(Integer).is_a?(<cfgAlias>$7: T.class_of(Integer))\lb: T::Boolean = <statTemp>$4: T::Boolean.!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_2" [style="bold"];
    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_3" [style="tapered"];

    "bb::ControlFlow#orZero1n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_1" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<returnTemp>$9: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_2" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_3" [
        label = "block[id=3, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_3" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero2" {
    label = "::ControlFlow#orZero2";
    color = blue;
    "bb::ControlFlow#orZero2_0" [shape = invhouse];
    "bb::ControlFlow#orZero2_1" [shape = parallelogram];

    "bb::ControlFlow#orZero2_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_3" [style="tapered"];

    "bb::ControlFlow#orZero2_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_1" -> "bb::ControlFlow#orZero2_1" [style="bold"];
    "bb::ControlFlow#orZero2_3" [
        label = "block[id=3, rubyBlockId=0]()\la: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_3" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_4" [
        label = "block[id=4, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: Integer = a\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_4" -> "bb::ControlFlow#orZero2_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3" {
    label = "::ControlFlow#orZero3";
    color = blue;
    "bb::ControlFlow#orZero3_0" [shape = invhouse];
    "bb::ControlFlow#orZero3_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_2" [style="bold"];
    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_3" [style="tapered"];

    "bb::ControlFlow#orZero3_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_1" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_2" [
        label = "block[id=2, rubyBlockId=0]()\l<statTemp>$5: Integer(1) = 1\l<statTemp>$6: Integer(2) = 2\l<ifTemp>$3: T::Boolean = <statTemp>$5: Integer(1).==(<statTemp>$6: Integer(2))\l<ifTemp>$3: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: NilClass = a\l<ifTemp>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_5" [
        label = "block[id=5, rubyBlockId=0]()\l<returnTemp>$7: Integer(1) = 1\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$7: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_5" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$8: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_6" -> "bb::ControlFlow#orZero3_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3n" {
    label = "::ControlFlow#orZero3n";
    color = blue;
    "bb::ControlFlow#orZero3n_0" [shape = invhouse];
    "bb::ControlFlow#orZero3n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3n_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_2" [style="bold"];
    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_3" [style="tapered"];

    "bb::ControlFlow#orZero3n_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_1" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_2" [
        label = "block[id=2, rubyBlockId=0]()\l<statTemp>$6: Integer(1) = 1\l<statTemp>$7: Integer(2) = 2\l<statTemp>$4: T::Boolean = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_2" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<statTemp>$4: NilClass = a\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_3" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_4" [
        label = "block[id=4, rubyBlockId=0](<statTemp>$4: T.nilable(T::Boolean))\lb: T::Boolean = <statTemp>$4: T.nilable(T::Boolean).!()\lb: T::Boolean\l"
    ];

    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_5" [style="bold"];
    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_6" [style="tapered"];

    "bb::ControlFlow#orZero3n_5" [
        label = "block[id=5, rubyBlockId=0]()\l<returnTemp>$9: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_5" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$10: Integer(1) = 1\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$10: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_6" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero4" {
    label = "::ControlFlow#orZero4";
    color = blue;
    "bb::ControlFlow#orZero4_0" [shape = invhouse];
    "bb::ControlFlow#orZero4_1" [shape = parallelogram];

    "bb::ControlFlow#orZero4_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_2" [style="bold"];
    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_3" [style="tapered"];

    "bb::ControlFlow#orZero4_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_1" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<ifTemp>$3: Integer = a\l<ifTemp>$3: Integer\l"
    ];

    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: TrueClass = true\l<ifTemp>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_5" [
        label = "block[id=5, rubyBlockId=0](a: T.nilable(Integer))\l<returnMethodTemp>$2: T.noreturn = return a: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_5" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$6 = 0\l<returnMethodTemp>$2 = return <returnTemp>$6\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_6" -> "bb::ControlFlow#orZero4_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero5" {
    label = "::ControlFlow#orZero5";
    color = blue;
    "bb::ControlFlow#orZero5_0" [shape = invhouse];
    "bb::ControlFlow#orZero5_1" [shape = parallelogram];

    "bb::ControlFlow#orZero5_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: ControlFlow = cast(<self>: NilClass, ControlFlow);\la: T.nilable(Integer) = load_arg(a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_2" [style="bold"];
    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_3" [style="tapered"];

    "bb::ControlFlow#orZero5_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_1" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_2" [
        label = "block[id=2, rubyBlockId=0](a: Integer)\l<ifTemp>$3: TrueClass = true\l<ifTemp>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_3" [
        label = "block[id=3, rubyBlockId=0](a: NilClass)\l<ifTemp>$3: NilClass = a\l<ifTemp>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_5" [
        label = "block[id=5, rubyBlockId=0](a: Integer)\l<returnMethodTemp>$2: T.noreturn = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_5" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_6" [
        label = "block[id=6, rubyBlockId=0]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_6" -> "bb::ControlFlow#orZero5_1" [style="bold"];
}

subgraph "cluster_::<Class:ControlFlow>#<static-init>" {
    label = "::<Class:ControlFlow>#<static-init>";
    color = blue;
    "bb::<Class:ControlFlow>#<static-init>_0" [shape = invhouse];
    "bb::<Class:ControlFlow>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:ControlFlow>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(ControlFlow) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U ControlFlow>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U ControlFlow>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$8: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_0" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_1" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" [
        label = "block[id=2, rubyBlockId=1](<self>: T.class_of(ControlFlow), <selfRestore>$8: T.class_of(ControlFlow), <block-pre-call-temp>$7: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_5" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_3" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_3" [
        label = "block[id=3, rubyBlockId=0](<selfRestore>$8: T.class_of(ControlFlow), <block-pre-call-temp>$7: Sorbet::Private::Static::Void)\l<statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$8\l<cfgAlias>$29: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$31: Sorbet::Private::Static::Void = <cfgAlias>$29: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$32: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_3" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_5" [
        label = "block[id=5, rubyBlockId=1](<self>: T.class_of(ControlFlow), <selfRestore>$8: T.class_of(ControlFlow), <block-pre-call-temp>$7: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$15: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$18: T.class_of(T) = alias <C T>\l<cfgAlias>$20: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$22: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$16: <Type: T.nilable(Integer)> = <cfgAlias>$18: T.class_of(T).any(<cfgAlias>$20: T.class_of(Integer), <cfgAlias>$22: T.class_of(NilClass))\l<magic>$23: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$14: {a: <Type: T.nilable(Integer)>} = <magic>$23: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$15: Symbol(:\"a\"), <hashTemp>$16: <Type: T.nilable(Integer)>)\l<statTemp>$12: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$14: {a: <Type: T.nilable(Integer)>})\l<cfgAlias>$25: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$11: T::Private::Methods::DeclBuilder = <statTemp>$12: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$25: T.class_of(Integer))\l<blockReturnTemp>$26: T.noreturn = blockreturn<sig> <blockReturnTemp>$11: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_5" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" [
        label = "block[id=6, rubyBlockId=2](<self>: T.class_of(ControlFlow), <selfRestore>$32: T.class_of(ControlFlow), <block-pre-call-temp>$31: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_9" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_7" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_7" [
        label = "block[id=7, rubyBlockId=0](<selfRestore>$32: T.class_of(ControlFlow), <block-pre-call-temp>$31: Sorbet::Private::Static::Void)\l<statTemp>$27: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$31, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$32\l<cfgAlias>$48: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$50: Sorbet::Private::Static::Void = <cfgAlias>$48: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$51: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_7" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_9" [
        label = "block[id=9, rubyBlockId=2](<self>: T.class_of(ControlFlow), <selfRestore>$32: T.class_of(ControlFlow), <block-pre-call-temp>$31: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$39: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$41: T.class_of(Integer) = alias <C Integer>\l<magic>$42: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$38: {a: T.class_of(Integer)} = <magic>$42: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$39: Symbol(:\"a\"), <cfgAlias>$41: T.class_of(Integer))\l<statTemp>$36: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$38: {a: T.class_of(Integer)})\l<cfgAlias>$44: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$35: T::Private::Methods::DeclBuilder = <statTemp>$36: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$44: T.class_of(Integer))\l<blockReturnTemp>$45: T.noreturn = blockreturn<sig> <blockReturnTemp>$35: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_9" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" [
        label = "block[id=10, rubyBlockId=3](<self>: T.class_of(ControlFlow), <selfRestore>$51: T.class_of(ControlFlow), <block-pre-call-temp>$50: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_13" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_11" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_11" [
        label = "block[id=11, rubyBlockId=0](<selfRestore>$51: T.class_of(ControlFlow), <block-pre-call-temp>$50: Sorbet::Private::Static::Void)\l<statTemp>$46: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$50, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$51\l<cfgAlias>$72: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$74: Sorbet::Private::Static::Void = <cfgAlias>$72: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$75: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_11" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_13" [
        label = "block[id=13, rubyBlockId=3](<self>: T.class_of(ControlFlow), <selfRestore>$51: T.class_of(ControlFlow), <block-pre-call-temp>$50: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$58: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$61: T.class_of(T) = alias <C T>\l<cfgAlias>$63: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$65: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$59: <Type: T.nilable(Integer)> = <cfgAlias>$61: T.class_of(T).any(<cfgAlias>$63: T.class_of(Integer), <cfgAlias>$65: T.class_of(NilClass))\l<magic>$66: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$57: {a: <Type: T.nilable(Integer)>} = <magic>$66: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$58: Symbol(:\"a\"), <hashTemp>$59: <Type: T.nilable(Integer)>)\l<statTemp>$55: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$57: {a: <Type: T.nilable(Integer)>})\l<cfgAlias>$68: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$54: T::Private::Methods::DeclBuilder = <statTemp>$55: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$68: T.class_of(Integer))\l<blockReturnTemp>$69: T.noreturn = blockreturn<sig> <blockReturnTemp>$54: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_13" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" [
        label = "block[id=14, rubyBlockId=4](<self>: T.class_of(ControlFlow), <selfRestore>$75: T.class_of(ControlFlow), <block-pre-call-temp>$74: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_17" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_15" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_15" [
        label = "block[id=15, rubyBlockId=0](<selfRestore>$75: T.class_of(ControlFlow), <block-pre-call-temp>$74: Sorbet::Private::Static::Void)\l<statTemp>$70: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$74, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$75\l<cfgAlias>$96: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$98: Sorbet::Private::Static::Void = <cfgAlias>$96: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$99: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_15" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_17" [
        label = "block[id=17, rubyBlockId=4](<self>: T.class_of(ControlFlow), <selfRestore>$75: T.class_of(ControlFlow), <block-pre-call-temp>$74: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$82: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$85: T.class_of(T) = alias <C T>\l<cfgAlias>$87: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$89: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$83: <Type: T.nilable(Integer)> = <cfgAlias>$85: T.class_of(T).any(<cfgAlias>$87: T.class_of(Integer), <cfgAlias>$89: T.class_of(NilClass))\l<magic>$90: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$81: {a: <Type: T.nilable(Integer)>} = <magic>$90: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$82: Symbol(:\"a\"), <hashTemp>$83: <Type: T.nilable(Integer)>)\l<statTemp>$79: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$81: {a: <Type: T.nilable(Integer)>})\l<cfgAlias>$92: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$78: T::Private::Methods::DeclBuilder = <statTemp>$79: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$92: T.class_of(Integer))\l<blockReturnTemp>$93: T.noreturn = blockreturn<sig> <blockReturnTemp>$78: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_17" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" [
        label = "block[id=18, rubyBlockId=5](<self>: T.class_of(ControlFlow), <selfRestore>$99: T.class_of(ControlFlow), <block-pre-call-temp>$98: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_21" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_19" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_19" [
        label = "block[id=19, rubyBlockId=0](<selfRestore>$99: T.class_of(ControlFlow), <block-pre-call-temp>$98: Sorbet::Private::Static::Void)\l<statTemp>$94: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$98, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$99\l<cfgAlias>$120: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$122: Sorbet::Private::Static::Void = <cfgAlias>$120: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$123: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_19" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_21" [
        label = "block[id=21, rubyBlockId=5](<self>: T.class_of(ControlFlow), <selfRestore>$99: T.class_of(ControlFlow), <block-pre-call-temp>$98: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$106: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$109: T.class_of(T) = alias <C T>\l<cfgAlias>$111: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$113: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$107: <Type: T.nilable(Integer)> = <cfgAlias>$109: T.class_of(T).any(<cfgAlias>$111: T.class_of(Integer), <cfgAlias>$113: T.class_of(NilClass))\l<magic>$114: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$105: {a: <Type: T.nilable(Integer)>} = <magic>$114: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$106: Symbol(:\"a\"), <hashTemp>$107: <Type: T.nilable(Integer)>)\l<statTemp>$103: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$105: {a: <Type: T.nilable(Integer)>})\l<cfgAlias>$116: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$102: T::Private::Methods::DeclBuilder = <statTemp>$103: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$116: T.class_of(Integer))\l<blockReturnTemp>$117: T.noreturn = blockreturn<sig> <blockReturnTemp>$102: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_21" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" [
        label = "block[id=22, rubyBlockId=6](<self>: T.class_of(ControlFlow), <selfRestore>$123: T.class_of(ControlFlow), <block-pre-call-temp>$122: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_25" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_23" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_23" [
        label = "block[id=23, rubyBlockId=0](<selfRestore>$123: T.class_of(ControlFlow), <block-pre-call-temp>$122: Sorbet::Private::Static::Void)\l<statTemp>$118: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$122, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$123\l<cfgAlias>$144: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$146: Sorbet::Private::Static::Void = <cfgAlias>$144: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$147: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_23" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_25" [
        label = "block[id=25, rubyBlockId=6](<self>: T.class_of(ControlFlow), <selfRestore>$123: T.class_of(ControlFlow), <block-pre-call-temp>$122: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$130: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$133: T.class_of(T) = alias <C T>\l<cfgAlias>$135: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$137: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$131: <Type: T.nilable(Integer)> = <cfgAlias>$133: T.class_of(T).any(<cfgAlias>$135: T.class_of(Integer), <cfgAlias>$137: T.class_of(NilClass))\l<magic>$138: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$129: {a: <Type: T.nilable(Integer)>} = <magic>$138: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$130: Symbol(:\"a\"), <hashTemp>$131: <Type: T.nilable(Integer)>)\l<statTemp>$127: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$129: {a: <Type: T.nilable(Integer)>})\l<cfgAlias>$140: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$126: T::Private::Methods::DeclBuilder = <statTemp>$127: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$140: T.class_of(Integer))\l<blockReturnTemp>$141: T.noreturn = blockreturn<sig> <blockReturnTemp>$126: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_25" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" [
        label = "block[id=26, rubyBlockId=7](<self>: T.class_of(ControlFlow), <selfRestore>$147: T.class_of(ControlFlow), <block-pre-call-temp>$146: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_29" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_27" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_27" [
        label = "block[id=27, rubyBlockId=0](<selfRestore>$147: T.class_of(ControlFlow), <block-pre-call-temp>$146: Sorbet::Private::Static::Void)\l<statTemp>$142: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$146, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$147\l<cfgAlias>$168: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$170: Sorbet::Private::Static::Void = <cfgAlias>$168: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$171: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_27" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_29" [
        label = "block[id=29, rubyBlockId=7](<self>: T.class_of(ControlFlow), <selfRestore>$147: T.class_of(ControlFlow), <block-pre-call-temp>$146: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$154: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$157: T.class_of(T) = alias <C T>\l<cfgAlias>$159: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$161: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$155: <Type: T.nilable(Integer)> = <cfgAlias>$157: T.class_of(T).any(<cfgAlias>$159: T.class_of(Integer), <cfgAlias>$161: T.class_of(NilClass))\l<magic>$162: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$153: {a: <Type: T.nilable(Integer)>} = <magic>$162: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$154: Symbol(:\"a\"), <hashTemp>$155: <Type: T.nilable(Integer)>)\l<statTemp>$151: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$153: {a: <Type: T.nilable(Integer)>})\l<cfgAlias>$164: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$150: T::Private::Methods::DeclBuilder = <statTemp>$151: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$164: T.class_of(Integer))\l<blockReturnTemp>$165: T.noreturn = blockreturn<sig> <blockReturnTemp>$150: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_29" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" [
        label = "block[id=30, rubyBlockId=8](<self>: T.class_of(ControlFlow), <selfRestore>$171: T.class_of(ControlFlow), <block-pre-call-temp>$170: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_33" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_31" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_31" [
        label = "block[id=31, rubyBlockId=0](<selfRestore>$171: T.class_of(ControlFlow), <block-pre-call-temp>$170: Sorbet::Private::Static::Void)\l<statTemp>$166: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$170, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$171\l<cfgAlias>$192: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<block-pre-call-temp>$194: Sorbet::Private::Static::Void = <cfgAlias>$192: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(ControlFlow))\l<selfRestore>$195: T.class_of(ControlFlow) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_31" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_33" [
        label = "block[id=33, rubyBlockId=8](<self>: T.class_of(ControlFlow), <selfRestore>$171: T.class_of(ControlFlow), <block-pre-call-temp>$170: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$178: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$181: T.class_of(T) = alias <C T>\l<cfgAlias>$183: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$185: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$179: <Type: T.nilable(Integer)> = <cfgAlias>$181: T.class_of(T).any(<cfgAlias>$183: T.class_of(Integer), <cfgAlias>$185: T.class_of(NilClass))\l<magic>$186: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$177: {a: <Type: T.nilable(Integer)>} = <magic>$186: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$178: Symbol(:\"a\"), <hashTemp>$179: <Type: T.nilable(Integer)>)\l<statTemp>$175: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$177: {a: <Type: T.nilable(Integer)>})\l<cfgAlias>$188: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$174: T::Private::Methods::DeclBuilder = <statTemp>$175: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$188: T.class_of(Integer))\l<blockReturnTemp>$189: T.noreturn = blockreturn<sig> <blockReturnTemp>$174: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_33" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" [
        label = "block[id=34, rubyBlockId=9](<self>: T.class_of(ControlFlow), <selfRestore>$195: T.class_of(ControlFlow), <block-pre-call-temp>$194: Sorbet::Private::Static::Void)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_37" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_35" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_35" [
        label = "block[id=35, rubyBlockId=0](<selfRestore>$195: T.class_of(ControlFlow), <block-pre-call-temp>$194: Sorbet::Private::Static::Void)\l<statTemp>$190: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$194, sig>\l<self>: T.class_of(ControlFlow) = <selfRestore>$195\l<cfgAlias>$217: T.class_of(T::Sig) = alias <C Sig>\l<cfgAlias>$219: T.class_of(T) = alias <C T>\l<statTemp>$214: T.class_of(ControlFlow) = <self>: T.class_of(ControlFlow).extend(<cfgAlias>$217: T.class_of(T::Sig))\l<cfgAlias>$222: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$224: Symbol(:\"orZero0\") = :\"orZero0\"\l<statTemp>$220: Symbol(:\"orZero0\") = <cfgAlias>$222: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$224: Symbol(:\"orZero0\"))\l<cfgAlias>$227: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$229: Symbol(:\"orZero0a\") = :\"orZero0a\"\l<statTemp>$225: Symbol(:\"orZero0a\") = <cfgAlias>$227: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$229: Symbol(:\"orZero0a\"))\l<cfgAlias>$232: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$234: Symbol(:\"orZero0n\") = :\"orZero0n\"\l<statTemp>$230: Symbol(:\"orZero0n\") = <cfgAlias>$232: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$234: Symbol(:\"orZero0n\"))\l<cfgAlias>$237: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$239: Symbol(:\"orZero1n\") = :\"orZero1n\"\l<statTemp>$235: Symbol(:\"orZero1n\") = <cfgAlias>$237: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$239: Symbol(:\"orZero1n\"))\l<cfgAlias>$242: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$244: Symbol(:\"orZero2\") = :\"orZero2\"\l<statTemp>$240: Symbol(:\"orZero2\") = <cfgAlias>$242: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$244: Symbol(:\"orZero2\"))\l<cfgAlias>$247: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$249: Symbol(:\"orZero3\") = :\"orZero3\"\l<statTemp>$245: Symbol(:\"orZero3\") = <cfgAlias>$247: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$249: Symbol(:\"orZero3\"))\l<cfgAlias>$252: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$254: Symbol(:\"orZero3n\") = :\"orZero3n\"\l<statTemp>$250: Symbol(:\"orZero3n\") = <cfgAlias>$252: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$254: Symbol(:\"orZero3n\"))\l<cfgAlias>$257: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$259: Symbol(:\"orZero4\") = :\"orZero4\"\l<statTemp>$255: Symbol(:\"orZero4\") = <cfgAlias>$257: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$259: Symbol(:\"orZero4\"))\l<cfgAlias>$262: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$264: Symbol(:\"orZero5\") = :\"orZero5\"\l<statTemp>$260: Symbol(:\"orZero5\") = <cfgAlias>$262: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$264: Symbol(:\"orZero5\"))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_35" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_37" [
        label = "block[id=37, rubyBlockId=9](<self>: T.class_of(ControlFlow), <selfRestore>$195: T.class_of(ControlFlow), <block-pre-call-temp>$194: Sorbet::Private::Static::Void)\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$202: Symbol(:\"a\") = :\"a\"\l<cfgAlias>$205: T.class_of(T) = alias <C T>\l<cfgAlias>$207: T.class_of(Integer) = alias <C Integer>\l<cfgAlias>$209: T.class_of(NilClass) = alias <C NilClass>\l<hashTemp>$203: <Type: T.nilable(Integer)> = <cfgAlias>$205: T.class_of(T).any(<cfgAlias>$207: T.class_of(Integer), <cfgAlias>$209: T.class_of(NilClass))\l<magic>$210: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$201: {a: <Type: T.nilable(Integer)>} = <magic>$210: T.class_of(<Magic>).<build-keyword-args>(<hashTemp>$202: Symbol(:\"a\"), <hashTemp>$203: <Type: T.nilable(Integer)>)\l<statTemp>$199: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$201: {a: <Type: T.nilable(Integer)>})\l<cfgAlias>$212: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$198: T::Private::Methods::DeclBuilder = <statTemp>$199: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$212: T.class_of(Integer))\l<blockReturnTemp>$213: T.noreturn = blockreturn<sig> <blockReturnTemp>$198: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_37" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
}

}

